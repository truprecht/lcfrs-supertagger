[Corpus]
# the whole corpus should be in a single file
filename = corpora/alpinosample.export
# determines the corpus format: export (Negra), brackets (PTB), tiger, ...
inputfmt = export
# determines the corpus file encoding, usuallly utf-8, except export which is in iso-8859-1
inputenc = iso-8859-1
# split determines the corpus portions used as train, dev and test split
# split = [<skip first n sentences>] <train sentences> <dev sentences> <test sentences>
# ```split = debug <train> <test>``` uses the first <train> sentences as train and dev set, and the first <test> sentences for test
split = debug 3 1
# two-letter language code used to determine pretrained embeddings
language = nl

[Lexicalization]
# if given, use head rules for the transportation of terminals
headrules = disco-dop/alpino.headrules
# determines the nonterminal naming scheme when terminals
# are transported:
# * strict: nonterminals are of the form A_fo_mod, where fo
#   is the fanout in the treebank and mod is one of +, - or 0
#   if transporting the terminal increases, decreases or keeps the fanout
# * merge: new nonterminals are of the form A_fo where fo is the
#   new fanout, i.e. they are merged with old nonterminals. 
propterm_nonterminals = strict
# if propterm_nonterminals = merge, adds the given marker as suffix to all
# nonterminals where a terminal was removed
propterm_marker = ""
# determines how double-lexical rules are split.
# * unrestrictive: the tag for the head terminal is its parent nonterminal
#   with a marker that the nonhead was removed (as def. by
#   propterm_nonterminals), for the nonhead terminal the tag is NONHEAD
# * strict_head: the head's tag contains the double-lex rule
# * nt_nonhead: the nonhead's tag contains the lhs nonterminal of the rule
# * strict_nonhead: the nonhead's tag contains the double-lex rule
# * strict: strict_head and strict_nonhead
split_strictness = strict

[Grammar]
# horizontal and vertical markovization
# for the extracted corpus grammar when binarized
h = 0
v = 1

[Eval-common]
# In the case of parse fails the largest partial derivations are put together.
# fallbackprob is a penalty chosen in the interval [0, 1] that is used as weight
# for artificially introduced rules when no derivation is found.
fallbackprob = 1e-5
# determines how many supertags per sentence position are used
ktags = 10
# configuration file for evalb-style F-scores
evalfilename = disco-dop/proper.prm
# batch size for neural network predictions
batchsize = 32
# reports parsing scores for all constituents (False), discontinuous constituents (True),
# both separately (both), or as specified in ```evalfilename``` (param)
only_disc = both
# reports supertag prediction accuracy among k best tags (kbest),
# for the best tag (best), both separately (both), or none at all (none)
# accuracy = both
# reports accuracy of the predicted pos tags (True or False)
pos_accuracy = True

# these sections may be used if configurations for
# dev and test evaluation diverge
# e.g. this configuration monitors the prediction accuracy of supertags
# in the development set during training, but not at test time
[Eval-Development]
accuracy = both

[Eval-Test]
accuracy = none